<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>data-engineering on</title><link>/tags/data-engineering/</link><description>Recent content in data-engineering on</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 21 Oct 2018 19:58:00 +0000</lastBuildDate><atom:link href="/tags/data-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing on the Dunnhumby Engineering Blog</title><link>/posts/2018-10-21-writing-for-dunnhumby/</link><pubDate>Sun, 21 Oct 2018 19:58:00 +0000</pubDate><guid>/posts/2018-10-21-writing-for-dunnhumby/</guid><description>Dunnhumby is a retail data science company that I&amp;rsquo;ve been working with lately. I&amp;rsquo;ve enjoyed writing a couple of articles for their Data Science and Engineering blog.
The first is a slightly extended version of an article on here, Scala Types in Scio Pipelines.
The more recent article is original and talks about the experiences we&amp;rsquo;ve had putting together streaming demos of real-time streaming data processing solutions. If you&amp;rsquo;re interested, you can find that article at Building Live Streaming Demos</description></item><item><title>Scala Types in Scio Pipelines</title><link>/posts/2018-07-29-scala-types-in-beam-pipelines/</link><pubDate>Sun, 29 Jul 2018 10:36:22 +0000</pubDate><guid>/posts/2018-07-29-scala-types-in-beam-pipelines/</guid><description>Data pipelines in Apache Beam have a distinctly functional flavour, whichever language you use. That&amp;rsquo;s because they can be distributed over a cluster of machines, so careful management of state and side-effects is important.
Spotify&amp;rsquo;s Scio is an excellent Scala API for Beam. Scala&amp;rsquo;s functional ideas help to cut out much of the boilerplate present in the native Java API.
Scio makes good use of Scala&amp;rsquo;s tuple types, in particular pairs (x, y).</description></item></channel></rss>
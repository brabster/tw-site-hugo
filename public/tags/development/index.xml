<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>development on</title><link>/tags/development/</link><description>Recent content in development on</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 29 Jul 2018 10:36:22 +0000</lastBuildDate><atom:link href="/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Scala Types in Scio Pipelines</title><link>/posts/2018-07-29-scala-types-in-beam-pipelines/</link><pubDate>Sun, 29 Jul 2018 10:36:22 +0000</pubDate><guid>/posts/2018-07-29-scala-types-in-beam-pipelines/</guid><description>Data pipelines in Apache Beam have a distinctly functional flavour, whichever language you use. That&amp;rsquo;s because they can be distributed over a cluster of machines, so careful management of state and side-effects is important.
Spotify&amp;rsquo;s Scio is an excellent Scala API for Beam. Scala&amp;rsquo;s functional ideas help to cut out much of the boilerplate present in the native Java API.
Scio makes good use of Scala&amp;rsquo;s tuple types, in particular pairs (x, y).</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>scala on</title><link>/tags/scala/</link><description>Recent content in scala on</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 17 Jan 2019 20:00:00 +0000</lastBuildDate><atom:link href="/tags/scala/index.xml" rel="self" type="application/rss+xml"/><item><title>Performance with Spring Boot and Gatling (Part 2)</title><link>/posts/2019-01-17-spring-boot-performance-part-2/</link><pubDate>Thu, 17 Jan 2019 20:00:00 +0000</pubDate><guid>/posts/2019-01-17-spring-boot-performance-part-2/</guid><description>In Part 1, we built a simple Spring Boot webapp and demonstrated a surprising performance problem. A Gatling performance test simulating different numbers of users each making a single request showed our webapp unable to keep up with 40 &amp;ldquo;users&amp;rdquo; making one request per second on my fairly powerful computer.
We eliminate a couple of potential causes in the first part of the article. If you just want to know what was causing the problem, you can go straight there.</description></item><item><title>Performance with Spring Boot and Gatling (Part 1)</title><link>/posts/2019-01-07-spring-boot-performance-part-1/</link><pubDate>Mon, 07 Jan 2019 19:58:00 +0000</pubDate><guid>/posts/2019-01-07-spring-boot-performance-part-1/</guid><description>Just after the rest of the team had left for their Christmas holidays, my colleague and I discovered a weird performance problem with a Spring Boot application we&amp;rsquo;d just started writing. This is a the story of discovering the problem and the detective work that led us to the culprit hiding in plain sight. We&amp;rsquo;re going to recreate the app and the performance tests, but first I&amp;rsquo;ll tell you how we got here.</description></item><item><title>Scala Types in Scio Pipelines</title><link>/posts/2018-07-29-scala-types-in-beam-pipelines/</link><pubDate>Sun, 29 Jul 2018 10:36:22 +0000</pubDate><guid>/posts/2018-07-29-scala-types-in-beam-pipelines/</guid><description>Data pipelines in Apache Beam have a distinctly functional flavour, whichever language you use. That&amp;rsquo;s because they can be distributed over a cluster of machines, so careful management of state and side-effects is important.
Spotify&amp;rsquo;s Scio is an excellent Scala API for Beam. Scala&amp;rsquo;s functional ideas help to cut out much of the boilerplate present in the native Java API.
Scio makes good use of Scala&amp;rsquo;s tuple types, in particular pairs (x, y).</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on</title><link>/posts/</link><description>Recent content in Posts on</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sat, 07 Nov 2020 12:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Teaching Machine Learning</title><link>/posts/2020-11-07-teaching-ml/</link><pubDate>Sat, 07 Nov 2020 12:00:00 +0000</pubDate><guid>/posts/2020-11-07-teaching-ml/</guid><description/></item><item><title>Bashing Alpine</title><link>/posts/2020-06-07-bashing-alpine/</link><pubDate>Sun, 07 Jun 2020 12:00:00 +0000</pubDate><guid>/posts/2020-06-07-bashing-alpine/</guid><description>So this annoying and trivial little problem catches me out every so often. I am always misled by the error message! You&amp;rsquo;ll see what I mean shortly. For context, it usually happens when I&amp;rsquo;m working in Docker containers on a build.
Let&amp;rsquo;s say we have a script like this, saved as bash-script.sh:
#!/bin/bash echo &amp;#34;Hello, Bash&amp;#34; Nice and simple. Let&amp;rsquo;s build a Docker image with it that runs it. Here&amp;rsquo;s the Dockerfile.</description></item><item><title>Helm Charts for Argo Workflows</title><link>/posts/2020-05-21-helm-argo/</link><pubDate>Sat, 23 May 2020 12:00:00 +0000</pubDate><guid>/posts/2020-05-21-helm-argo/</guid><description>Argo is a lightweight, Kubernetes-native workflow solution. Workflows are implemented as Kubernetes manifests, so Helm is a natural choice for packaging them.
Helm also supports templating values which can be really helpful - but that&amp;rsquo;s where we run into a problem. Helm uses mustache-style string interpolation, and so does Argo.
Here&amp;rsquo;s an illustration of the problem, based on Argo&amp;rsquo;s hello world example.
apiVersion: argoproj.io/v1alpha1 kind: WorkflowTemplate metadata: name: hello-world spec: entrypoint: whalesay templates: - name: whalesay container: image: docker/whalesay:latest command: [cowsay] args: [ &amp;#34;{{workflow.</description></item><item><title>Packer &amp; Fedora Gotchas</title><link>/posts/2019-11-07-packer-memory-gocha/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><guid>/posts/2019-11-07-packer-memory-gocha/</guid><description>It&amp;rsquo;s been a while! I&amp;rsquo;ve got lots on my blog-backlog but here&amp;rsquo;s a tidbit in case it helps anyone else out there.
Lately, I&amp;rsquo;ve been working in virtual machines to strengthen my security posture for clients. There&amp;rsquo;s more to come on that, but for now I wanted to share a fix for a confusing problem I had. I was trying to install Fedora 31 as a Packer build.
packr build fedora.</description></item><item><title>Performance with Spring Boot and Gatling (Part 2)</title><link>/posts/2019-01-17-spring-boot-performance-part-2/</link><pubDate>Thu, 17 Jan 2019 20:00:00 +0000</pubDate><guid>/posts/2019-01-17-spring-boot-performance-part-2/</guid><description>In Part 1, we built a simple Spring Boot webapp and demonstrated a surprising performance problem. A Gatling performance test simulating different numbers of users each making a single request showed our webapp unable to keep up with 40 &amp;ldquo;users&amp;rdquo; making one request per second on my fairly powerful computer.
We eliminate a couple of potential causes in the first part of the article. If you just want to know what was causing the problem, you can go straight there.</description></item><item><title>Performance with Spring Boot and Gatling (Part 1)</title><link>/posts/2019-01-07-spring-boot-performance-part-1/</link><pubDate>Mon, 07 Jan 2019 19:58:00 +0000</pubDate><guid>/posts/2019-01-07-spring-boot-performance-part-1/</guid><description>Just after the rest of the team had left for their Christmas holidays, my colleague and I discovered a weird performance problem with a Spring Boot application we&amp;rsquo;d just started writing. This is a the story of discovering the problem and the detective work that led us to the culprit hiding in plain sight. We&amp;rsquo;re going to recreate the app and the performance tests, but first I&amp;rsquo;ll tell you how we got here.</description></item><item><title>Writing on the Dunnhumby Engineering Blog</title><link>/posts/2018-10-21-writing-for-dunnhumby/</link><pubDate>Sun, 21 Oct 2018 19:58:00 +0000</pubDate><guid>/posts/2018-10-21-writing-for-dunnhumby/</guid><description>Dunnhumby is a retail data science company that I&amp;rsquo;ve been working with lately. I&amp;rsquo;ve enjoyed writing a couple of articles for their Data Science and Engineering blog.
The first is a slightly extended version of an article on here, Scala Types in Scio Pipelines.
The more recent article is original and talks about the experiences we&amp;rsquo;ve had putting together streaming demos of real-time streaming data processing solutions. If you&amp;rsquo;re interested, you can find that article at Building Live Streaming Demos</description></item><item><title>Setting up this site with GatsbyJS and Netlify</title><link>/posts/2018-08-19-setting-up-a-gatsby-site/</link><pubDate>Sun, 19 Aug 2018 11:24:25 +0000</pubDate><guid>/posts/2018-08-19-setting-up-a-gatsby-site/</guid><description>Every company needs a website, and Tempered Works is no exception! Having bought the domain names when I set the company up, I&amp;rsquo;ve been putting off getting a website up and running because I&amp;rsquo;m not really a front-end creative type. When I heard Jason Lengstorf talking to The Changelog about GatsbyJS, I was intrigued&amp;hellip; so I tried it out.
Why GatsbyJS? I think GatsbyJS is interesting when compared to other static site generators because it&amp;rsquo;s based on GraphQL and React.</description></item><item><title>Scala Types in Scio Pipelines</title><link>/posts/2018-07-29-scala-types-in-beam-pipelines/</link><pubDate>Sun, 29 Jul 2018 10:36:22 +0000</pubDate><guid>/posts/2018-07-29-scala-types-in-beam-pipelines/</guid><description>Data pipelines in Apache Beam have a distinctly functional flavour, whichever language you use. That&amp;rsquo;s because they can be distributed over a cluster of machines, so careful management of state and side-effects is important.
Spotify&amp;rsquo;s Scio is an excellent Scala API for Beam. Scala&amp;rsquo;s functional ideas help to cut out much of the boilerplate present in the native Java API.
Scio makes good use of Scala&amp;rsquo;s tuple types, in particular pairs (x, y).</description></item></channel></rss>